#!/usr/bin/env python3


import hashlib
import os
import sys
import tempfile


HOME = os.path.expanduser("~")
SEARCH = [os.getcwd(), os.path.join(HOME, ".config", "axitools", "profiles")]


def find_profile(name: str) -> str:
    if os.path.isabs(name) and os.path.exists(name):
        return name

    for base in SEARCH:
        for cand in (name, name + ".py"):
            p = os.path.join(base, cand)

            if os.path.exists(p):
                return p

    sys.exit(f"profile not found: {name}")


def load_profiles(paths: list[str]) -> dict[str, int | str | bool]:
    ns: dict[str, int | str | bool] = {}

    for p in paths:
        code = open(p, "r", encoding="utf-8").read()
        exec(compile(code, p, "exec"), {}, ns)

    _ = ns.setdefault("penlift", 3)
    return ns


def write_conf(ns: dict[str, int | str | bool]) -> str:
    lines = ["# generated by axp\n"]

    for k in sorted(ns):
        lines.append(f"{k} = {ns[k]!r}\n")

    data = "".join(lines).encode()
    h = hashlib.sha256(data).hexdigest()[:16]
    path = os.path.join(tempfile.gettempdir(), f"axidraw_conf.{h}.py")

    if not os.path.exists(path):
        with open(path, "wb") as f:
            _ = f.write(data)

    return path


def main() -> None:
    if "--" in sys.argv:
        cut = sys.argv.index("--")
        profs = sys.argv[1:cut]
        cmd = sys.argv[cut + 1 :]

    else:
        profs = sys.argv[1:]
        cmd = []

    paths = [find_profile(p) for p in profs]
    conf = write_conf(load_profiles(paths) if paths else {"penlift": 3})

    if not cmd:
        print(conf)
        return

    if cmd[0] in ("plot", "cycle", "up", "down"):
        cmd = {
            "cycle": ["-m", "cycle"],
            "down": ["-m", "manual", "-M", "lower_pen"],
            "plot": ["-m", "plot"],
            "up": ["-m", "manual", "-M", "raise_pen"],
        }[cmd[0]] + cmd[1:]

    if cmd[0].startswith("-"):
        cmd = ["axicli"] + cmd

    if "--config" not in cmd:
        cmd += ["--config", conf]

    os.execvp(cmd[0], cmd)


if __name__ == "__main__":
    main()
